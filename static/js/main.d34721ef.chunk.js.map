{"version":3,"sources":["colours.js","components/portal.js","context/toaster.js","App.js","serviceWorker.js","context/index.js","index.js"],"names":["hex","red","green","blue","map","c","toString","padStart","join","rgba","alpha","hsla","hue","saturation","r","g","b","max","Math","min","lightness","delta","h","round","s","l","Portal","children","React","useState","forceUpdate","container","useRef","useLayoutEffect","current","document","createElement","body","appendChild","removeChild","ReactDOM","createPortal","Context","createContext","undefined","Toaster","timeout","item","setItem","dismiss","useCallback","toast","element","id","random","Date","now","useEffect","timeoutId","setTimeout","clearTimeout","value","useMemo","Provider","FullPageErrorFallback","error","css","aria-hidden","white","ColorInput","onChange","htmlFor","type","placeholder","Message","text","Output","props","context","useContext","Error","useToaster","onClick","evt","target","textContent","selected","getSelection","rangeCount","getRangeAt","el","setAttribute","style","position","left","select","execCommand","removeAllRanges","addRange","copyToClipboard","ColorNotations","color","formatName","format","colours","key","App","setColor","backgroundColor","toColorString","textColor","readableColor","FallbackComponent","role","aria-label","nextColor","parseToRgb","_","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","doRegister","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","immediate","addEventListener","getRegistration","update","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","AppProviders","render","StrictMode","getElementById","confirm","registrationWaiting","waiting","postMessage","visibilityState"],"mappings":"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","file":"static/js/main.d34721ef.chunk.js","sourcesContent":["/**\n * returns a hex notation\n * @param {Colour} color\n * @returns {string}\n */\nfunction hex({ red, green, blue }) {\n  return (\n    \"#\" + [red, green, blue].map(c => c.toString(16).padStart(2, \"0\")).join(\"\")\n  );\n}\n\n/**\n * returns a rgba notation\n * @param {Colour} color\n * @returns {string}\n */\nfunction rgba({ red, green, blue, alpha = 1 }) {\n  return `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n}\n\n/**\n * returns a hsla notation\n * Conversion formula adapted from http://en.wikipedia.org/wiki/HSL_color_space\n * @param {Colour} color\n * @returns {string}\n */\nfunction hsla({ red: r, green: g, blue: b, alpha = 1 }) {\n  const red = r / 255;\n  const green = g / 255;\n  const blue = b / 255;\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n\n  let hue;\n  let saturation;\n  let lightness = (max + min) / 2;\n\n  if (max === min) {\n    hue = saturation = 0; // achromatic\n  } else {\n    const delta = max - min;\n    saturation =\n      lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n    switch (max) {\n      case red:\n        hue = (green - blue) / delta + (green < blue ? 6 : 0);\n        break;\n      case green:\n        hue = (blue - red) / delta + 2;\n        break;\n      case blue:\n        hue = (red - green) / delta + 4;\n        break;\n      default:\n        break;\n    }\n\n    hue /= 6;\n  }\n\n  const h = Math.round(hue * 360);\n  const s = Math.round(saturation * 100);\n  const l = Math.round(lightness * 100);\n\n  return `hsla(${h}, ${s}%, ${l}%, ${alpha})`;\n}\n\nexport { hex, rgba, hsla };\n\n/**\n * Colour or color is a property of light as seen by people.\n * Most of the world's spelling of the word is colour,\n * the word color is used in American English.\n * @typedef Colour\n * @type {object}\n * @property {number} red\n * @property {number} green\n * @property {number} blue\n * @property {number} [alpha=1]\n */\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nfunction Portal({ children }) {\n  const [, forceUpdate] = React.useState();\n  const container = React.useRef(null);\n\n  React.useLayoutEffect(() => {\n    container.current = document.createElement(\"div\");\n    document.body.appendChild(container.current);\n    forceUpdate({});\n    return () =>\n      container.current && document.body.removeChild(container.current);\n  }, []);\n\n  return (\n    container.current && ReactDOM.createPortal(children, container.current)\n  );\n}\n\nexport { Portal };\n","import React from \"react\";\nimport { Portal } from \"components/portal\";\n\n/**\n * @typedef {object} ToasterContext\n * @property {(message: React.ReactNode) => void} toast\n * @property {() => void} dismiss\n */\n\n/** @type {React.Context<ToasterContext>} */\nconst Context = React.createContext(undefined);\n\nconst not = x => !x;\n\nconst createId = () => Math.round(Math.random() * Date.now());\n\nfunction Toaster({ children, timeout = 1200 }) {\n  const [item, setItem] = React.useState(undefined);\n\n  const dismiss = React.useCallback(() => setItem(undefined), []);\n\n  const toast = React.useCallback(element => {\n    setItem({ element, id: createId() });\n  }, []);\n\n  const id = item?.id;\n  React.useEffect(() => {\n    if (not(id)) return void 0;\n\n    const timeoutId = setTimeout(dismiss, timeout);\n    return () => clearTimeout(timeoutId);\n  }, [id, dismiss, timeout]);\n\n  const value = React.useMemo(\n    () => ({\n      toast,\n      dismiss,\n    }),\n    [toast, dismiss]\n  );\n\n  return (\n    <Context.Provider value={value}>\n      {item && <Portal>{item?.element}</Portal>}\n      {children}\n    </Context.Provider>\n  );\n}\n\nfunction useToaster() {\n  const context = React.useContext(Context);\n  if (context === undefined) {\n    throw new Error(\"useToaster must be used within ToasterContext\");\n  }\n  return context;\n}\n\nexport { Toaster, useToaster };\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\nimport { parseToRgb, readableColor, toColorString } from \"polished\";\nimport * as colours from \"./colours\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { useToaster } from \"./context/toaster\";\n\nfunction FullPageErrorFallback({ error = null }) {\n  return (\n    <div\n      css={css`\n        display: flex;\n        height: 100vh;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        padding: 0 1rem;\n        background-color: #f55;\n      `}\n    >\n      <p\n        css={css`\n          font-size: 1.25rem;\n          font-weight: bold;\n          line-height: 2;\n          text-align: center;\n        `}\n      >\n        Whoops! Something went terribly wrong{\" \"}\n        <span aria-hidden=\"true\">(๑◕︵◕๑)</span>\n        <br />\n        Try refreshing the app.\n      </p>\n    </div>\n  );\n}\n\nconst white = {\n  red: 255,\n  green: 255,\n  blue: 255,\n};\n\nfunction App() {\n  const [color, setColor] = React.useState(white);\n\n  /**\n   * @param {React.ChangeEvent<HTMLInputElement>} evt\n   */\n  const onChange = evt => {\n    try {\n      const nextColor = parseToRgb(evt.target.value);\n      setColor(nextColor);\n    } catch (_) {\n      // well, do nothing i guess...\n    }\n  };\n\n  const backgroundColor = toColorString(color);\n  const textColor = readableColor(backgroundColor, \"rgba(0,0,0,0.87)\", \"white\");\n\n  React.useEffect(() => {\n    document.body.style.backgroundColor = backgroundColor;\n    document.body.style.color = textColor;\n  }, [backgroundColor, textColor]);\n\n  return (\n    <ErrorBoundary FallbackComponent={FullPageErrorFallback}>\n      <h1\n        css={css`\n          position: fixed;\n          top: 1rem;\n          left: 1rem;\n          margin: 0;\n        `}\n      >\n        <span role=\"img\" aria-label=\"unicorn\">\n          🦄\n        </span>{\" \"}\n        colours.\n      </h1>\n      <div\n        css={css`\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          flex-direction: column;\n          width: 100vw;\n          height: 100vh;\n          padding: 0 1rem;\n        `}\n      >\n        <div>\n          <ColorInput onChange={onChange} />\n          <ColorNotations color={color} />\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\n/**\n * @param {object} props\n * @param {(evt: React.ChangeEvent<HTMLInputElement>) => any} props.onChange\n */\nfunction ColorInput({ onChange }) {\n  return (\n    <div\n      css={css`\n        position: relative;\n      `}\n    >\n      <label\n        htmlFor=\"color\"\n        css={css`\n          position: absolute;\n          border: 0;\n          clip: rect(0 0 0 0);\n          height: 1px;\n          margin: -1px;\n          overflow: hidden;\n          padding: 0;\n          width: 1px;\n        `}\n      >\n        Color:\n      </label>\n      <input\n        type=\"text\"\n        id=\"color\"\n        onChange={onChange}\n        placeholder=\"hex/rgb(a)/hsl(a)\"\n        css={css`\n          display: block;\n          width: 100%;\n          min-width: 24ch;\n          height: 2em;\n          padding: 0;\n          color: inherit;\n          font-size: 1.5rem;\n          background: none;\n          border: 0;\n          border-bottom: 1px solid currentColor;\n          border-radius: 0;\n          outline: none;\n          ::placeholder {\n            color: currentColor;\n            opacity: 0.5;\n          }\n        `}\n      />\n      <div\n        css={css`\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          width: 100%;\n          height: 2px;\n          background-color: currentColor;\n          transform-origin: center bottom;\n          transform: scale(0);\n          transition: transform 120ms;\n          input:focus + & {\n            transform: scale(1);\n          }\n        `}\n      />\n    </div>\n  );\n}\n\nfunction Message({ text = \"Copied to clipboard!\" }) {\n  return (\n    <div\n      css={css`\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        z-index: 10;\n        width: 100%;\n        padding: 0.5rem 1rem;\n        line-height: 2;\n        color: rgba(0, 0, 0, 0.87);\n        background-color: #00fa9a;\n        box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n          0px 4px 5px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n        animation-duration: 120ms;\n        animation-name: slide-up;\n        animation-timing-function: ease-out;\n\n        @keyframes slide-up {\n          from {\n            transform: translateY(100%);\n          }\n        }\n      `}\n    >\n      {text}\n    </div>\n  );\n}\n\n// TODO rename to something meaningful\nfunction Output(props) {\n  const { toast } = useToaster();\n\n  const onClick = React.useCallback(\n    evt => {\n      const text = copyToClipboard(evt);\n      toast(<Message text={`\"${text}\" copied to clipboard!`} />);\n    },\n    [toast]\n  );\n\n  return (\n    <button\n      onClick={onClick}\n      css={css`\n        display: block;\n        width: 100%;\n        min-width: 24ch;\n        height: 2em;\n        padding: 0;\n        margin: 0;\n        color: inherit;\n        font-size: 1.5rem;\n        text-align: left;\n        background: none;\n        border: 0;\n        border-bottom: 1px dashed currentColor;\n        outline: none;\n        cursor: pointer;\n      `}\n      {...props}\n    />\n  );\n}\n\n/**\n * @param {object} props\n * @param {import(\"./colours\").Colour} props.color\n */\nfunction ColorNotations({ color }) {\n  return (\n    <ul\n      css={css`\n        width: 100%;\n        list-style: none;\n        padding: 0.5rem 0;\n        margin: 0;\n        font-size: 1.5rem;\n        line-height: 2;\n      `}\n    >\n      {[\"hex\", \"rgba\", \"hsla\"].map(formatName => {\n        const format = colours[formatName];\n        return (\n          <li key={formatName}>\n            <Output>{format(color)}</Output>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction copyToClipboard(evt) {\n  const text = evt.target.textContent;\n  // Check if there is any content selected previously\n  // and store selection if found\n  const selected =\n    document.getSelection().rangeCount > 0\n      ? document.getSelection().getRangeAt(0)\n      : false;\n\n  const el = document.createElement(\"textarea\");\n  el.value = text;\n  el.setAttribute(\"readonly\", \"\");\n  el.style.position = \"absolute\";\n  el.style.left = \"-9999px\";\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n\n  if (selected) {\n    document.getSelection().removeAllRanges();\n    document.getSelection().addRange(selected);\n  }\n  return text;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    const doRegister = () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    };\n\n    // either call register immediately, or wait for window load(default behaviour)\n    if (config && config.immediate) {\n      doRegister();\n    } else {\n      window.addEventListener(\"load\", doRegister);\n    }\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  if (config && config.immediate) {\n    navigator.serviceWorker.getRegistration(swUrl).then(registration => {\n      registration && registration.update();\n    });\n  } else {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n  }\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Toaster } from \"./toaster\";\n\nfunction AppProviders({ children }) {\n  return <Toaster>{children}</Toaster>;\n}\n\nexport { AppProviders };\n","import \"./bootstrap\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AppProviders } from \"./context\";\n\nrender(\n  <React.StrictMode>\n    <AppProviders>\n      <App />\n    </AppProviders>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register({\n  onUpdate(registration) {\n    if (window.confirm(\"New version available. Update now?\")) {\n      const registrationWaiting = registration.waiting;\n      if (registrationWaiting) {\n        registrationWaiting.postMessage({ type: \"SKIP_WAITING\" });\n        registrationWaiting.addEventListener(\"statechange\", evt => {\n          if (evt.target.state === \"activated\") {\n            window.location.reload();\n          }\n        });\n      }\n    }\n  },\n});\n\ndocument.addEventListener(\"visibilitychange\", () => {\n  if (document.visibilityState === \"visible\") {\n    serviceWorker.register({ immediate: true });\n  }\n});\n"],"sourceRoot":""}